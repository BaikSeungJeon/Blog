1.
시스템 구성요소

입력 (Input) : 처리 방법, 처리할 데이터, 조건을 시스템에 투입하는 것
처리 (Process) : 입력된 데이터를 처리 방법과 조건에 따라 처리하는 것
출력 (Output) : 처리된 결과를 시스템에서 산출하는 것
제어 (Control) : 자료를 입력하여 출력될 때까지의 처리 과정이 올바르게 진행되는지 감독하는 것
피드백 (Feedback) : 출력된 결과가 예정된 목표를 만족시키지 못할 경우 목표 달성을 위해 반복 처리하는 것

Maintenance는 유지보수로서, 시스템 구성요소에는 포함되지 않음.

2. 유스케이스
액터는 대상 시스템과 상호 작용하는 사람이나 다른 시스템에 의한 역할이다.

3. 요구사항 개발 프로세스
도출 - 분석 - 명세 - 확인

4. 객체지향 기법에서 같은 클래스에 속한 각각의 객체를 의미
instance

8.
시스템 품질 속성은
가용성, 변경용이성, 성능, 보안성, 사용편의성, 시험용의성 6가지

10.
CASE의 원천 기술은
구조적 기법, 프로토타이핑 기술, 자동프로그래밍 기술, 정보 저장소 기술, 분산 처리 기술

11.
1. 클래스(Class): 객체를 정의해놓은 것. 객체의 설계도, 틀
2. 패키지(Package): 클래스를 묶어두는 물리적인 단위. 클래스들의 집합
3. 객체(Object): 실제로 존재하는 것. 클래스에 정의된 내용대로 메모리에 생성된 것

13.
럼바우는 객동기
객체 동적 기능 모델링

14. UML 다이어그램이 아닌 것은?
     
     1.	액티비티 다이어그램(Activity diagram)
     2.	절차 다이어그램(Procedural diagram) <<<< 이녀석
     3.	클래스 다이어그램(Class diagram)
     4.	시퀀스 다이어그램(Sequence diagram)
답 2

15.	UML 모델에서 한 객체가 다른 객체에게 오퍼레이션을 수행하도록 지정하는 의미적 관계로 옳은 것은?
     
Dependency(의존) : 한 사물의 명세서가 바뀌면 그것을 사용하는 다른 사물에게 영향을 끼치는 것을 말합니다 (Cascade 생각하셈)
Realization(실체화) : 한 객체가 다른 객체에 의해 오퍼레이션을 수행하도록 지정
Generalization(일반화) : 일반화된 사물과 좀 더 특수화된 사물 사이의 관계를 말합니다.('is-a')관계
Association(연관) : 두 사물간의 구조적 관계로, 어느 한 사물 객체가 다른 사물 객체와 연결되어 있음을 말함 ('has-a')관계라고도 합니다.

답 2

16.
상위 CASE: 요구 분석과 설계 단계를 지원
- 모델들 사이의 모순검사 기능
- 모델의 오류 검증 기능
- 자료흐름도 작성 기능

하위 CASE: 코드를 작성하고 테스트하며 문서화하는 과정 지원
- 원시코드 생성 기능

18.
애자일 개발 방법론
익스트림 프로그래밍(XP , Extreme Programming)
스크럼크리스털 패밀리
기능 주도 개발(FDD , Feature-Driven Development)
적응형 소프트웨어 개발 (ASD , Adaptive Software Development(
익스트림 모델링

하둡(Hadoop)
분산 환경에서 빅 데이터를 저장하고 처리할 수 있는 자바 기반의 오픈 소스 프레임 워크.

21.
힙 정렬(Heap Sort) : 평균과 최악 모두 시간 복잡도는 O(nlog2n)
최악의 수행 시간은 : O(nlog n)

22.
단위 테스트는 테스트 코드가 독립적이어야 함으로 각 모듈간의 상호작용은 해당되지 않는다.
모듈 간의 비정상적 상호작용으로 인한 원치 않는 결과 > 통합 테스트에서 발견

25.
화이트 박스 테스트 : 내부 구조와 동작을 검사하는 테스트 방식, 소프트웨어의 내부 소스를 테스트
블랙 박스 테스트 : 내부 구조나 작동 원리를 모르는 상태에서 입력에 따른 출력 결과를 테스트

27.
Ant, Maven, Gradle 은 빌드자동화 도구
대표적인 형상 관리 도구 GIT, CVS, Subversion

28.
[저작권 관리 구성 요소]
- 콘텐츠 분배자: 암호화된 콘텐츠를 유통하는곳/사람
- 패키저: 콘텐츠를 메타데이터와 함께 배포가능한 형태로 묶어 암호화
- 클리어링 하우스: 키 관리 및 라이센스 발급 관리
- DRM 컨트롤러: 배포된 콘텐츠의 이용권한을 통제
Dataware house는 아님

30.
블랙박스 테스트 : 작동 원리를 모르는 상태에서 '동작을 검사'하는 방식(사용자 관점의 테스트)
화이트박스 테스트: '내부 소스코드'를 테스트 하는 기법 (개발자 관점의 단위 테스트)

32.
O(Nlog2N)의 시간이 소요되는 정렬 알고리즘 > 합병정렬

33.
prefix: 전의표기법
infix: 중위표기법
postfix: 후위표기법

34.
EAI (Enterprise Application Integration): 기업 내 상호 연동이 가능하게 해주는 솔루션

35.
인터페이스 구현 검증 도구는 xUnit, STAF, Fitnesse, NTAF, Selenium, watir

44.
DELETE = 조건을 달아서 특정 행을 삭제할 때 사용
DROP = VIEW, TABLE, DATABASE를 완전 삭제할 때 사용

48.
개체 무결성 : 릴레이션에서 기본키를 구성하는 속성은 널(Null)값이나 중복값을 가질 수 없다.

49.
병행제어는 동시에 여러 개의 트랜잭션을 병행수행할때, DB의 일관성을 파괴하지 않도록 제어하는 것.
시분할 기법은 사용자가 여러 개의 작업이 동시에 수행하는 것처럼 느끼도록 분할하는 운영체제 운영기법

51.
select δ 
project π
join ▷◁
division ÷

위 넷은 순수 관계 연산자

차집합: 일반 집합 연산자

53.
차수는 +를 해주고 카디널리티는 *를 해주면 새로운 릴레이션 차수와 카디널리티 나옴

54.
카디널리티는 튜플의 수

55.
update문의 기본형식은
update (테이블) set (변경할 값) where (조건)

56.
차수 = Degree = Attribute의 수 = 속성의 수(관계 DB의 열)
기수 = Cardinality = Tuple의 수 = 대응수(관계 DB의 행)

59.
갱신 이상(Modification Anomaly)
삽입 이상(Insertion Anomaly)
삭제 이상(Deletion Anomaly)

62.
(내)게 (공)(부)하라고 강요하지 말아요
(제)가 (스)트레스 받(자)나요
내용(content) ＞ 공통(common) ＞ 외부(external) ＞ 제어(control) ＞ 스템프(stamp) ＞ 자료(data)

65.
- Detection(탐지) : 교착상태 발생을 허용하고 발생 시 원인을 규명하여 해결 (ex 자원할당 그래프)
- Avoidance (회피) : 교착상태 가능성을 배제하지 않고 적절하게 피해나가는 방법 (ex 은행원 알고리즘)
- Recovery (복구) : 교착상태 발견 후 현황대기를 배제시키거나 자원을 중단하는 메모리 할당 기법 (ex 선점, 프로세스 중지(희생자 선택)
- Prevention(예방) : 교착상태의 필요조건을 부정함으로써 교착상태가 발생하지 않도록 미리 예방하는 방법 (ex 환형대기, 비선점, 점유와 대기, 상호배제 4가지 부정)

75.
응집도의 순서는
우연적(Coincidental) 응집도 < 논리적(Logical) 응집도 < 시간적 응집도(Temporal)
< 절차적(Procedural) 응집도 < 교환적(Communication) 응집도 < 순차적(Sequential) 응집도 < 기능적(Functional) 응집

78.
stdlib.h는 C 언어의 표준 라이브러리로, 문자열 변환, 사 난수 생성, 동적 메모리 관리 등의 함수들을 포함

80.
한 노드에서 다른 노드로 프레임을 전송하는 책임을 갖는 층(Layer)은 데이터 링크 계층

